
# Token declarations:
%token PLUS AND NOT
%token LSHIFT RSHIFT
%token EQ SEMICOLON
%token COMMENT
%token PLEFT PRIGHT
%token JMPZ JMPN JMPA
%token AC SP IR TIR ZERO ONE _ONE AMASK SMASK A B C D E F
%token ALU MAR MBR
%token LINENUM
%token EOL

# Starting production rule
%start main

%{

# PERL HEADER CODE ===========================================================

# USE ========================================================================
use warnings;
use Carp;

# ============================================================================
our $VERSION = '1.00';

# CONSTANTS ==================================================================

# Error messages
my $_ERR_BRACKET_NOT_FOUND      = 'Seguramente falta parentesis derecho';
my $_ERR_UNRECOGNISED_EXPRESION = 'Unrecognized expression: _ERROR_';
my $_ERR_UNRECOGNISED_OPERATOR  = 'Unrecognized operator: _ERROR_';
my $_ERR_WRONG_SYNTAX           = 'Syntax error near: _ERROR_';
my $_ERR_TOKEN_EXPECTED         = 'Expected: _ERROR_';
my $_ERR_TAG_NOT_FOUND          = 'Tag not found: _ERROR_';
my $_ERR_END_OF_INPUT           = 'End of input reached';

# ============================================================================
my $BUS_A    = 2**8;  # 256
my $BUS_B    = 2**12; # 4096
my $BUS_C    = 2**16; # 65536

my $BIT_ENC  = 2**20;
my $BIT_WR   = 2**21;
my $BIT_RD   = 2**22;
my $BIT_MAR  = 2**23;
my $BIT_MBR  = 2**24;

my $SH_R     = 2**25;
my $SH_L     = 2**26;

my $ALU_PLUS = 0;
my $ALU_AND  = 2**27;
my $ALU_IDD  = 2**28;
my $ALU_NOT  = 3 * (2**27);

my $COND_N   = 2**29;
my $COND_Z   = 2**30;
my $COND_A   = 3 * (2**29);

my $BIT_AMUX = 2**31;


# END OF PERL HEADER =========================================================

%}

%%

main:
	line_list
;

line_list:
	line EOL line_list |
	line
;

line:
	sent_list                 { $_[0] -> _line($_[1]) } |
	sent_list COMMENT         { $_[0] -> _line($_[1]) } |
	LINENUM sent_list         { $_[0] -> _line($_[2]) } |
	LINENUM sent_list COMMENT { $_[0] -> _line($_[2]) }
;

sent_list:
	sent SEMICOLON sent_list { $_[1] | $_[3] } |
	{ 0 }
;

sent:
	sent_alu |
	sent_io  |
	sent_jmp |
;

sent_alu:
	ALU  EQ shifter { $_[3] } |
	wreg EQ shifter { ($_[1] * $BUS_C) | $BIT_ENC | $_[3] } |
	MAR  EQ rreg    { $BIT_MAR | $ALU_IDD | ($_[3] * $BUS_B) } |
	MBR  EQ shifter { $BIT_MBR | $_[3] }
;

shifter:
	LSHIFT PLEFT op PRIGHT { $SH_L | $_[3] } |
	RSHIFT PLEFT op PRIGHT { $SH_R | $_[3] } |
	op
;

op:
	rreg AND rreg         { $ALU_AND  | ($_[3] * $BUS_A) | ($_[1] * $BUS_B) } |
	rreg PLUS rreg        { $ALU_PLUS | ($_[3] * $BUS_A) | ($_[1] * $BUS_B) } |
	NOT PLEFT rreg PRIGHT { $ALU_NOT  | ($_[3] * $BUS_A) } |
	rreg                  { $ALU_IDD  | ($_[1] * $BUS_A) } |

	MBR  AND rreg         { $ALU_AND | $BIT_AMUX | ($_[3] * $BUS_B) } |
	rreg AND MBR          { $ALU_AND | $BIT_AMUX | ($_[1] * $BUS_B) } |

	MBR  PLUS rreg        { $ALU_PLUS | $BIT_AMUX | ($_[3] * $BUS_B) } |
	rreg PLUS MBR         { $ALU_PLUS | $BIT_AMUX | ($_[1] * $BUS_B) } |

	NOT PLEFT MBR PRIGHT  { $ALU_NOT | $BIT_AMUX } |
	MBR                   { $ALU_IDD | $BIT_AMUX } |
;

wreg:
	AC | SP | IR | TIR | AMASK | SMASK | A | B | C | D | E | F
;

rreg:
	AC | SP | IR | TIR | ZERO | ONE | _ONE | AMASK | SMASK | A | B | C | D | E | F
;

sent_io:
	RD { $BIT_RD } |
	WR { $BIT_WR }
;

sent_jmp:
	JMPZ { $COND_Z | $_[1] } |
	JMPN { $COND_N | $_[1] } |
	JMPA { $COND_A | $_[1] }
;

%%

# ============================================================================
sub set_input {

	my ($self, $input) = @_;

	my $input_fh;
	if ($input) {
		if (ref $input) {
			if ( ref $input eq 'SCALAR') {
				open($input_fh, '<', $input) or croak 'Cannot open string ref for reading!';
			} elsif (ref $input eq 'IO' or ref $input eq 'GLOB') {
				$input_fh = $input;
			} else {
				croak 'Unrecognized REF for input: ' . ref $input;
			}
		} else {
			# It's a filename
			open($input_fh, '<', $input) or croak "Cannot open file $input for reading!";
		}
	} else {
		$input_fh = \*STDIN;
	}

	$self -> YYData -> {'INPUT_HANDLE'}  = $input_fh;
	return;

}

sub set_output {

	my ($self, $output) = @_;

	my $output_fh;
	if ($output) {
		if (ref $output) {
			if ( ref $output eq 'SCALAR') {
				open ($output_fh, '>', $output) or croak 'Cannot open string ref for writing!';
			} elsif (ref($output) =~ '^IO::' or ref($output) eq 'GLOB') {
				$output_fh = $output;
			} else {
				croak 'Unrecognized REF for output: ' . ref $output;
			}
		} else {
			# It's a filename
			open($output_fh, '>', $output) or croak "Cannot open file $output for writing!";
		}
	} else {
		$output_fh = \*STDOUT;
	}

	$self -> YYData -> {'OUTPUT_HANDLE'} = $output_fh;
	return;

}

sub process {

	my ($self, $input, $output) = @_;

	# INPUT selection
	$self -> set_input($input);

	# OUTPUT selection
	$self -> set_output($output);

	# Reset current line
	$self -> YYData -> {'INPUT_LINE'} = undef;

	# Reset errors from previous runs:
	$self -> YYData -> {'errors'} = [];

	# And reset tags too:
	$self -> YYData -> {'tags'} = {};

	# Do the job:
	return $self -> YYParse(
		yylex   => \&lexer,
		yyerror => \&_error,
		yydebug => 0x00
	);

	# Debug:
	# Bit Value    Outputs
	# 0x01         Token reading (useful for Lexer debugging)
	# 0x02         States information
	# 0x04         Driver actions (shifts, reduces, accept...)
	# 0x08         Parse Stack dump
	# 0x10         Error Recovery tracing
	# To have a full debugging ouput, use
	# debug => 0x1F

}

sub _line {

	my ($self, $line_value) = @_;
	my $output_fh = $self -> YYData -> {'OUTPUT_HANDLE'};
	unless ($self -> YYData -> {'WANT_BINARY'}) {
		$line_value = $self -> sentence_as_string($line_value);
	}
	print $output_fh $line_value;
	unless ($self -> YYData -> {'WANT_BINARY'}) {
		print $output_fh "\n";
	}
	return;

}

sub want_binary {

	my ($self) = @_;
	$self -> YYData -> {'WANT_BINARY'} = 1;
	return;

}

sub set_tags {

	my ($self) = @_;
	$self -> YYData -> {'tags'} = shift;
	return;

}

sub get_tag {

	my ($self, $tag) = @_;

	return $tag if ($tag =~ /^\d+$/);

	if (exists $self -> YYData -> {'tags'} -> {$tag}) {
		return $self -> YYData -> {'tags'} -> {$tag};
	}

	$self -> _add_error($_ERR_TAG_NOT_FOUND, $tag);
	return 0;

}

sub _add_error {

	my ($self, $msg, @stubs) = @_;

	while (my $val = shift @stubs)  {
		$msg =~ s/_ERROR_/'$val'/;
	}
	$msg =~ s/_ERROR_//g;

	unshift @{$self -> YYData -> {'errors'}}, $msg;
	return;

}

sub get_errors {
	my $self = shift;
	return $self -> YYData -> {'errors'};
}

# ============================================================================

sub lexer {

	my ($self) = @_;

	# ==========================================================================
	my $io_handle = $self -> YYData -> {'INPUT_HANDLE'};

	# ==========================================================================
	for ( $self -> YYData -> {'INPUT_LINE'} or ($self -> YYData -> {'INPUT_LINE'} = <$io_handle>) or return('', undef) ) {

		# ========================================================================
		s/^([\r\n]+)\s*//i                        && return('EOL',       $1);

		# ========================================================================
		s/^[\s\t]*//; # tabs and spaces are discarded

		# ========================================================================
		s/^(\d+):\s*//i                           && return('LINENUM',   $1);
		s/^(\;) *//i                              && return('SEMICOLON', $1);

		# ========================================================================
		s/^(\=|\:\=)\s*//i                        && return('EQ',        $1);

		# Shifts =================================================================
		s/^(LSHIFT)\s*//i                         && return('LSHIFT',    $1);
		s/^(RSHIFT)\s*//i                         && return('RSHIFT',    $1);

		# io =====================================================================
		s/^(RD)\s*//i                             && return('RD',        $1);
		s/^(WR)\s*//i                             && return('WR',        $1);

		# Jumps ==================================================================
		s/^(JMPZ)\s*(\d+)\s*//i                   && return('JMPZ',      $2);
		s/^(IF\s+Z\s+THEN\s+GOTO)\s*(\d+)\s*//i   && return('JMPZ',      $2);
		s/^(JMPN)\s*(\d+)\s*//i                   && return('JMPN',      $2);
		s/^(IF\s+N\s+THEN\s+GOTO)\s*(\d+)\s*//i   && return('JMPN',      $2);
		s/^(JMPA)\s*(\d+)\s*//i                   && return('JMPA',      $2);
		s/^(GOTO)\s*(\d+)\s*//i                   && return('JMPA',      $2);

		# Logical operators ======================================================
		s/^(NOT|NO|INV)\s*//i                     && return('NOT',       $1);
		s/^(AND|Y)\s*//i                          && return('AND',       $1);
		s/^(\+)\s*//i                             && return('PLUS',      $1);

		# Brackets ===============================================================
		s/^([\(])\s*//                            && return('PLEFT',     $1);
		s/^([\)])\s*//                            && return('PRIGHT',    $1);

		# Registers ==============================================================
		s/^(ALU)\s*//i                            && return('ALU',       $1);
		s/^(MAR)\s*//i                            && return('MAR',       $1);
		s/^(MBR)\s*//i                            && return('MBR',       $1);

		s/^(AC)\s*//i                             && return('AC',         1);
		s/^(SP)\s*//i                             && return('SP',         2);
		s/^(IR)\s*//i                             && return('IR',         3);
		s/^(TIR)\s*//i                            && return('TIR',        4);
		s/^(0)\s*//i                              && return('ZERO',       5);
		s/^(1)\s*//i                              && return('ONE',        6);
		s/^(\-1)\s*//i                            && return('_ONE',       7);
		s/^(AMASK)\s*//i                          && return('AMASK',      8);
		s/^(SMASK)\s*//i                          && return('SMASK',      9);
		s/^(A)\s*//i                              && return('A',         10);
		s/^(B)\s*//i                              && return('B',         11);
		s/^(C)\s*//i                              && return('C',         12);
		s/^(D)\s*//i                              && return('D',         13);
		s/^(E)\s*//i                              && return('E',         14);
		s/^(F)\s*//i                              && return('F',         15);

		# Comments ===============================================================
		s/^[\{]\s*(.*?)[\}]//                     && return('COMMENT',   $1);
		s/^\#\s*(.*)$//i                          && return('COMMENT',   $1);

		# If could not recognize a token and there is still something to read
		# there is an error in the expression
		$self -> _add_error( $_ERR_UNRECOGNISED_EXPRESION, $_) if $_;

		# As mentioned in the Parse::Yacc help
		# we should return ('', undef) at the end
		return('', undef);

	} # for

	# EOF
	return('', undef);

}

sub _error {

	my ($self) = @_;

	# Token read:
	my $token = $self -> YYCurtok;

	# Value of token read
	my $value = $self -> YYCurval;

	# input not consumed
	my $input = $self -> YYData -> {INPUT} || $value;

	# list of expected tokens
	my $expected = join("' o '", grep(!/error/, $self -> YYExpect));

	$self -> _add_error( $_ERR_WRONG_SYNTAX, ($input || $_ERR_END_OF_INPUT) );
	$self -> _add_error( $_ERR_TOKEN_EXPECTED, $expected );

	exists $self -> YYData -> {ERRMSG} &&
	do {
		my $description = $self -> YYData -> {ERRMSG};
		$self -> _add_error($description);
		delete $self -> YYData -> {ERRMSG};
		return;
	};
	return;

}

sub sentence_as_string {

	my ($self, $sentence) = @_;

	my $strbin = sprintf '%032b', $sentence;
	my $strpp = '';

	$strpp .= substr( $strbin, 0,  1 ) . ' '; # AMUX
	$strpp .= substr( $strbin, 1,  2 ) . ' '; # COND
	$strpp .= substr( $strbin, 3,  2 ) . ' '; # ALU
	$strpp .= substr( $strbin, 5,  2 ) . ' '; # SH
	$strpp .= substr( $strbin, 7,  1 ) . ' '; # MBR
	$strpp .= substr( $strbin, 8,  1 ) . ' '; # MAR
	$strpp .= substr( $strbin, 9,  1 ) . ' '; # RD
	$strpp .= substr( $strbin, 10, 1 ) . ' '; # WR
	$strpp .= substr( $strbin, 11, 1 ) . ' '; # ENC
	$strpp .= substr( $strbin, 12, 4 ) . ' '; # C
	$strpp .= substr( $strbin, 16, 4 ) . ' '; # B
	$strpp .= substr( $strbin, 20, 4 ) . ' '; # A
	$strpp .= substr( $strbin, 24, 8 ) . ' '; # ADDR

	$strpp =~ s/(\d)/$1 /g;
	$strpp =~ s/\s*$//;

	return $strpp;

}


# ============================================================================

1;

__END__

=pod

=encoding utf8

=head1 NAME

CPU::Mic1::Microassembler - Mic1 micro assembly language parser and compiler

=head1 SYNOPSIS

	use CPU::Mic1::Microassembler;

	# Create parser object:
	my $parser = CPU::Mic1::Microassembler -> new();

	# Process stdin
	$parser -> process();

=head1 DESCRIPTION

CPU::Mic1::Microassembler is an assembler that turns micro assembly language (MAL) into Mic-1 microinstructions.
This program was designed for the Mic1 Microprogramming Simulator found in:
http://cis.stvincent.edu/carlsond/cs330/mic1/mic1.html

The process() method is called to process assembler input. The first parameter indicates the input as one of: a filename, if defined; a reference to a text string containing assembler text; or a file handle reference (e.g. IO::Handle or sub-class) or GLOB (e.g. \*STDIN), from which the input can be read.
By default, the processed output is printed to STDOUT.

=head1 SOURCE

https://github.com/jpducassou/perl-cpu_mic1_microassembler

=head1 AUTHOR

Jean Pierre Ducassou

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.

=head1 NO WARRANTY

This software is provided "as-is," without any express or implied warranty. In no event shall the author be held liable for any damages arising from the use of the software.

=head1 SEE ALSO

L<Parse::Yapp>

=cut

